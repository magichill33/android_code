package com.lilo.sm;

import java.util.ArrayList;
import java.util.List;

import com.lilo.model.HouseModel;
import com.lilo.model.MessageEnum;
import com.lilo.service.RunQueryByPoint;
import com.lilo.service.RunQueryDataTask;
import com.lilo.util.DataUtil;
import com.lilo.util.TextOverlay;

import com.supermap.android.data.GetFeaturesResult;
import com.supermap.android.maps.LayerView;
import com.supermap.android.maps.MapController;
import com.supermap.android.maps.MapView;
import com.supermap.android.maps.Point2D;
import com.supermap.android.maps.PolygonOverlay;
import com.supermap.services.components.commontypes.Feature;
import com.supermap.services.components.commontypes.Geometry;
import com.supermap.services.components.commontypes.GeometryType;
import com.supermap.services.components.commontypes.ImageOutputOption;
import com.supermap.services.components.commontypes.MapParameter;
import com.supermap.services.components.commontypes.QueryParameter;
import com.supermap.services.components.commontypes.Rectangle2D;
import com.supermap.services.components.commontypes.TextStyle;

import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;
import android.os.Message;
import android.app.Activity;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Paint.Style;
import android.view.Menu;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnTouchListener;
import android.widget.Toast;

public class LiloMapActivity extends Activity
{

	private MapView mapView;
	private LayerView baseLayerView;
	private String map2d = "http://192.168.4.252:8090/iserver/services/map-wudu/rest/maps/map2d";
	//private String map2d = "http://192.168.4.252:8090/iserver/services/map-china400/rest/maps/China";
	private String dataUrl = "http://192.168.4.252:8090/iserver/services/data-WuduElements/rest/data";
	private String region_comm ="ORCL_supermap:wudu_sm_grid";
	//private String region_comm ="ORCL_supermap:wudu_com";
	private String sm_house = "ORCL_supermap:wudu_sm_house";
	private List<PolygonOverlay> polygonOverlays = new ArrayList<PolygonOverlay>(); //区域图层
	private List<TextOverlay> textOverlays = new ArrayList<TextOverlay>(); //区域文字
	private List<PolygonOverlay> houseOverlays = new ArrayList<PolygonOverlay>();
	
	private Handler regionHandler; //区域数据回显消息
	private Handler houseHandler; //房屋数据回显消息
	private Handler geoHandler; //点查询回显消息
	private LayerView layerView;
	private MapController mapController;
	//private PolygonOverlay regionLayer;
	// 数据集查询结果 
	//public GetFeaturesResult result; 
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
        mapView = (MapView) this.findViewById(R.id.mapview);
      
        
        mapController = mapView.getController();
		layerView = new LayerView(this);
		layerView.setURL(map2d);
		mapView.setBuiltInZoomControls(true);
		mapView.addLayer(layerView);
		
		geoHandler = new Handler(){
			@Override
			public void handleMessage(Message msg) {
				switch (msg.what) {
	            case MessageEnum.QUERY_SUCCESS:
	                GetFeaturesResult queryResult = (GetFeaturesResult) msg.obj;
	                drawSelectedHouse(queryResult);
	              //  progressDialog.dismiss();
	                break;
	            case MessageEnum.QUERY_FAILED:
	               // progressDialog.dismiss();
	                Toast.makeText(LiloMapActivity.this,"获取区域信息失败", Toast.LENGTH_LONG).show();
	                break;
	            default:
	               // progressDialog.dismiss();
	                break;
	            }
			}
		};
		/**
		 * 点击地图进行房屋数据查询
		 */
/*		mapView.setOnTouchListener(new OnTouchListener() {
			
			@Override
			public boolean onTouch(View v, MotionEvent event) {
				if(event.getAction() == MotionEvent.ACTION_UP)
				{
					int x = Math.round(event.getX());
					int y = Math.round(event.getY());
					Point2D point = mapView.getProjection().fromPixels(x,y);
					new RunQueryByPoint(dataUrl, sm_house, point, geoHandler).execute("*");
				}
				return true;
			}
		});*/
/*		mapView.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				int x = Math.round(v.getX());
				int y = Math.round(v.getY());
				Point2D point = mapView.getProjection().fromPixels(x,y);
				new RunQueryByPoint(dataUrl, sm_house, point, geoHandler).execute("*");
			}
		});
		*/
		//regionLayer = new PolygonOverlay(getPolygonPaint());
		regionHandler = new Handler(){
			@Override
			public void handleMessage(Message msg) {
	            switch (msg.what) {
	            case MessageEnum.QUERY_SUCCESS:
	                GetFeaturesResult queryResult = (GetFeaturesResult) msg.obj;
	                showQueryResult(queryResult);
	              //  progressDialog.dismiss();
	                break;
	            case MessageEnum.QUERY_FAILED:
	               // progressDialog.dismiss();
	                Toast.makeText(LiloMapActivity.this,"获取区域信息失败", Toast.LENGTH_LONG).show();
	                break;
	            default:
	               // progressDialog.dismiss();
	                break;
	            }
			}
		};
		
		houseHandler = new Handler(){
			@Override
			public void handleMessage(Message msg) {
				switch (msg.what) {
				case MessageEnum.QUERY_SUCCESS:
					GetFeaturesResult houseResult = (GetFeaturesResult) msg.obj;
					drawHouseOnMap(houseResult);
					break;
				case MessageEnum.QUERY_FAILED:
		            Toast.makeText(LiloMapActivity.this,"获取房屋信息失败", Toast.LENGTH_LONG).show();
		            break;
				default:
					break;
				}
			}
		};
		//清空绘制的数据
		clearRegionLay();
		//获取区域数据
		new RunQueryDataTask(dataUrl, region_comm, "SQBM = '621202100006'", regionHandler).execute("*");
		//获取房屋数据
		new RunQueryDataTask(dataUrl, sm_house, "SQBM = '621202100006'", houseHandler).execute("*");
	}
	


	/**
	 * 根据查询返回的结果集绘制区域
	 * @param result
	 */
	protected void showQueryResult(GetFeaturesResult result) {
		if (result == null || result.features == null) {
            Toast.makeText(this, "查询结果为空!", Toast.LENGTH_LONG).show();
            return;
        }
		List<List<Point2D>> pointsLists = new ArrayList<List<Point2D>>();
    	Feature[] queryfeatures = result.features;
   
    	
      	Rectangle2D bounds = DataUtil.getGraphicsBound(result);
      	DataUtil.zoomMap(bounds, mapView, mapController);
      	
    	for(Feature f:queryfeatures)
 	    {
    		String labelName = null;
    		for(int i = 0;i<f.fieldNames.length;i++)
    		{
    			if(f.fieldNames[i].equals("WGMC"))
    			{
    				labelName = f.fieldValues[i];
    				break;
    			}
    		}
    		Geometry geometry = f.geometry;
 	    	List<Point2D> points = DataUtil.getPiontsFromGeometry(geometry);
 	    	if (geometry.parts.length > 1) {
                int num = 0;
                for (int j = 0; j < geometry.parts.length; j++) {
                    int count = geometry.parts[j];
                    List<Point2D> partList = points.subList(num, num + count);
                    pointsLists.add(partList);
                    num = num + count;
                }
            } else {
                pointsLists.add(points);
            }
    		//pointsLists.add(points);
    		
    		/**
    		 * 标注文字
    		 */
    		Point2D center = new Point2D(geometry.getCenter().x,geometry.getCenter().y);
    		//OverlayItem overlayItem = new OverlayItem(center, labelName,labelName);
    		//dOverLay.addItem(overlayItem);
    		TextOverlay textOverlay = new TextOverlay(center, labelName);
    		mapView.getOverlays().add(textOverlay);
    		textOverlays.add(textOverlay);
 	    }
    	
    	// 把所有查询的几何对象都高亮显示
         for (int m = 0; m < pointsLists.size(); m++) {
             List<Point2D> geoPointList = pointsLists.get(m);
             PolygonOverlay polygonOverlay = new PolygonOverlay(getPolygonPaint(Color.BLUE,180,3));
             mapView.getOverlays().add(polygonOverlay);
             polygonOverlays.add(polygonOverlay);
             polygonOverlay.setData(geoPointList);
             polygonOverlay.setShowPoints(false);
            
         }
         
        this.mapView.invalidate(); //刷新地图
	}
	
	/**
	 * 绘制查询房屋数据
	 * @param houseResult
	 */
	protected void drawHouseOnMap(GetFeaturesResult houseResult)
	{
		if (houseResult == null || houseResult.features == null) {
            Toast.makeText(this, "查询结果为空!", Toast.LENGTH_LONG).show();
            return;
        }
		
		List<List<Point2D>> pointsLists = new ArrayList<List<Point2D>>();
    	Feature[] queryfeatures = houseResult.features;
    	
   	 	for(Feature f:queryfeatures)
	    {
	   		Geometry geometry = f.geometry;
	    	List<Point2D> points = DataUtil.getPiontsFromGeometry(geometry);
	    	if (geometry.parts.length > 1) 
	    	{
               int num = 0;
               for (int j = 0; j < geometry.parts.length; j++)
               {
                   int count = geometry.parts[j];
                   List<Point2D> partList = points.subList(num, num + count);
                   pointsLists.add(partList);
                   num = num + count;
               }
	    	} 
	    	else 
	    	{
               pointsLists.add(points);
	    	}
	    }
   	 	
   	// 把所有查询的几何对象都高亮显示
        for (int m = 0; m < pointsLists.size(); m++) {
            List<Point2D> geoPointList = pointsLists.get(m);
            PolygonOverlay polygonOverlay = new PolygonOverlay(getPolygonPaint(0x9696fe,50,1,Paint.Style.FILL));
            //PolygonOverlay polygonOverlay = new TouchPolygonOverlays(getPolygonPaint(0x9696fe,50,1,Paint.Style.FILL));
            mapView.getOverlays().add(polygonOverlay);
            houseOverlays.add(polygonOverlay);
            polygonOverlay.setData(geoPointList);
            polygonOverlay.setShowPoints(false);
           
        }
        
        this.mapView.invalidate(); //刷新地图
	}
	
	protected HouseModel drawSelectedHouse(GetFeaturesResult houseResult)
	{
		if (houseResult == null || houseResult.features == null) {
            Toast.makeText(this, "查询结果为空!", Toast.LENGTH_LONG).show();
            return null;
        }
		
   		Geometry geometry = houseResult.features[0].geometry;
    	List<Point2D> points = DataUtil.getPiontsFromGeometry(geometry);
   	// 把所有查询的几何对象都高亮显示
        PolygonOverlay polygonOverlay = new PolygonOverlay(getPolygonPaint(0xff0000,150,1,Paint.Style.FILL));
        mapView.getOverlays().add(polygonOverlay);
        polygonOverlay.setData(points);
        polygonOverlay.setShowPoints(false);
           
        
        this.mapView.invalidate(); //刷新地图
		return null;
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.lilo_map, menu);
		return true;
	}
	

	
    // 绘面风格
    private Paint getPolygonPaint(int color,int alpha,float width) {
      return getPolygonPaint(color, alpha, width, Paint.Style.STROKE);
    }
    
    private Paint getPolygonPaint(int color,int alpha,float width,Style style) {
        Paint paint = new Paint(Paint.ANTI_ALIAS_FLAG);
        paint.setColor(color);
        paint.setAlpha(alpha);
        
        paint.setStyle(style);
        paint.setStrokeJoin(Paint.Join.ROUND);
        paint.setStrokeCap(Paint.Cap.ROUND);
        paint.setStrokeWidth(width);
        return paint;
    }
    

    
    /**
     * 清空绘制区域
     */
    protected void clearRegionLay()
    {
    	 //lineOverlay.setData(new ArrayList<Point2D>());
         //polygonOverlay.setData(new ArrayList<Point2D>());
        // geoPoints.clear();
         if (polygonOverlays.size() != 0) {
             mapView.getOverlays().remove(polygonOverlays);
             polygonOverlays.clear();
         }
         if(textOverlays.size()!=0)
         {
        	 mapView.getOverlays().remove(textOverlays);
        	 textOverlays.clear();
         }
         if(houseOverlays.size()!=0)
         {
        	 mapView.getOverlays().remove(houseOverlays);
        	 houseOverlays.clear();
         }
         mapView.invalidate();
    }
    

	/**
	 * 触屏Overlays
	 * @author Administrator
	 *
	 */
	class TouchPolygonOverlays extends PolygonOverlay
	{
		public TouchPolygonOverlays(Paint polygonPaint) {
			super(polygonPaint);
		}
		
		@Override
		public boolean onTouchEvent(MotionEvent event, MapView mapView) {
			if (event.getAction() == MotionEvent.ACTION_UP) {
                int touchX = Math.round(event.getX());
                int touchY = Math.round(event.getY());
                // 记录点击位置
                Point2D touchPoint = mapView.getProjection().fromPixels(touchX, touchY);
                new RunQueryByPoint(dataUrl, sm_house, touchPoint, geoHandler).execute("*");
            }

            return true;
		}
	}
	
}
