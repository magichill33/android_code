package com.lilo.sm;

import java.util.ArrayList;
import java.util.List;

import com.lilo.model.HouseModel;
import com.lilo.model.MessageEnum;
import com.lilo.service.RunQueryByPoint;
import com.lilo.service.RunQueryDataTask;
import com.lilo.util.DataUtil;
import com.lilo.util.DrawUtil;
import com.lilo.util.TextOverlay;
import com.lilo.widget.TipForm;
import com.supermap.android.data.GetFeaturesResult;
import com.supermap.android.maps.DefaultItemizedOverlay;
import com.supermap.android.maps.LayerView;
import com.supermap.android.maps.MapController;
import com.supermap.android.maps.MapView;
import com.supermap.android.maps.OverlayItem;
import com.supermap.android.maps.Point2D;
import com.supermap.android.maps.PointOverlay;
import com.supermap.android.maps.PolygonOverlay;
import com.supermap.services.components.commontypes.Feature;
import com.supermap.services.components.commontypes.Geometry;
import com.supermap.services.components.commontypes.Rectangle2D;

import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.app.Activity;
import android.app.ProgressDialog;
import android.content.Intent;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Paint.Style;
import android.graphics.drawable.Drawable;
import android.util.Log;
import android.view.Menu;
import android.view.MotionEvent;
import android.widget.Toast;

public class LiloInfoUpdateActivity extends Activity {

	private MapView mapView;
	private MapController mapController;
	private LayerView layerView;
	private Handler regionHandler; //区域数据回显消息
	private Handler houseHandler;
	private Handler touchHouseHandler;
	private Handler partsHandler;
	
	private Geometry touchGeo = null;//房屋Geo
	
	/**
	 * 0：表示部件更新
	 * 1：表示房屋更新
	 */
	private String uType;
	private String gridCode;
	private String pType;
	private List<TextOverlay> textOverlays = new ArrayList<TextOverlay>(); //区域文字
	private List<PolygonOverlay> polygonOverlays = new ArrayList<PolygonOverlay>(); //区域图层
	private List<PolygonOverlay> houseOverlays = new ArrayList<PolygonOverlay>(); //房屋图层集
	private PolygonOverlay buildOverlay = null; //楼栋图层
	private DefaultItemizedOverlay partsOverlay = null;
	private String dataUrl;
	private String partsUrl;
	
	private boolean isAddPoint;
	private int touchDownX;
	private int touchDownY;
	private int touchX;
	private int touchY;
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_lilo_parts);
		mapView = (MapView) this.findViewById(R.id.mapview);
		mapController = mapView.getController();
		layerView = new LayerView(this);
		dataUrl = getString(R.string.mainUrl) + "/" + getString(R.string.dataUrl);
		partsUrl = getString(R.string.mainUrl) + "/" + getString(R.string.partsUrl);
		String map2d = getString(R.string.mainUrl) + "/" + getString(R.string.map2d);
		layerView.setURL(map2d);
		mapView.setBuiltInZoomControls(true);
		mapView.addLayer(layerView);
		Intent intent = getIntent();
		Bundle bundle = intent.getExtras();
		gridCode = bundle.getString("gridCode");
		uType = bundle.getString("uType");
		
		regionHandler = new Handler(){
			@Override
			public void handleMessage(Message msg) {
	            switch (msg.what) {
	            case MessageEnum.QUERY_SUCCESS:
	                GetFeaturesResult queryResult = (GetFeaturesResult) msg.obj;
	                showQueryResult(queryResult);
	              //  progressDialog.dismiss();
	                break;
	            case MessageEnum.QUERY_FAILED:
	               // progressDialog.dismiss();
	                Toast.makeText(LiloInfoUpdateActivity.this,"获取区域信息失败", Toast.LENGTH_LONG).show();
	                break;
	            default:
	               // progressDialog.dismiss();
	                break;
	            }
			}
		};
		
		houseHandler = new Handler()
		{
			@Override
			public void handleMessage(Message msg) {
				switch (msg.what) {
				case MessageEnum.QUERY_SUCCESS:
					GetFeaturesResult houseResult = (GetFeaturesResult) msg.obj;
					drawHouseOnMap(houseResult);
					break;
				case MessageEnum.QUERY_FAILED:
		            Toast.makeText(LiloInfoUpdateActivity.this,"获取房屋信息失败", Toast.LENGTH_LONG).show();
		            break;
				default:
					break;
				}
			}
		};
		
		touchHouseHandler = new Handler()
		{
			@Override
			public void handleMessage(Message msg) {
				switch (msg.what) {
	            case MessageEnum.QUERY_SUCCESS:
	            	TipForm.dismissDialog();
	                GetFeaturesResult queryResult = (GetFeaturesResult) msg.obj;
	                drawSelectedHouse(queryResult);
	                break;
	            case MessageEnum.QUERY_FAILED:
	            	TipForm.dismissDialog();
	                Toast.makeText(LiloInfoUpdateActivity.this,"获取区域信息失败", Toast.LENGTH_LONG).show();
	                break;
	            default:
	            	TipForm.dismissDialog();
	                break;
	            }
			}
		};
		
		partsHandler = new Handler()
		{
			@Override
			public void handleMessage(Message msg) {
				switch (msg.what) {
		            case MessageEnum.QUERY_SUCCESS:
		            	TipForm.dismissDialog();
		                GetFeaturesResult queryResult = (GetFeaturesResult) msg.obj;
		                drawParts(queryResult);
		                break;
		            case MessageEnum.QUERY_FAILED:
		            	TipForm.dismissDialog();
		                Toast.makeText(LiloInfoUpdateActivity.this,"获取区域信息失败", Toast.LENGTH_LONG).show();
		                break;
		            default:
		            	TipForm.dismissDialog();
		                break;
				}
			}
		};
		
		//清空绘制的数据
		clearRegionLay();
		//获取区域数据
		new RunQueryDataTask(dataUrl, 
						getString(R.string.region_grid), "WGBM = '" + gridCode + "'", regionHandler).execute("*");
		if(uType.equals("1"))
		{
			//获取房屋数据
			new RunQueryDataTask(dataUrl,getString(R.string.sm_house), 
					"WGBM = '" + gridCode + "'", houseHandler).execute("*");
		}else if(uType.equals("0"))
		{
			pType = bundle.getString("pType");
			int imgId = LiloInfoUpdateActivity.this
					.getResources().getIdentifier("p"+pType, "drawable", "com.lilo.sm");
	    	Drawable iconPart = LiloInfoUpdateActivity.this.getResources().getDrawable(imgId);
	    	partsOverlay = new DefaultItemizedOverlay(iconPart);
	    	new RunQueryDataTask(partsUrl, 
	    			getString(R.string.wudu_cmp) + "_" + pType, "BGCODE = '" + gridCode + "'", partsHandler).execute("*");
		}
	}
	
	/**
	 * 根据查询返回的结果集绘制区域
	 * @param result
	 */
	protected void showQueryResult(GetFeaturesResult result) {
		if (result == null || result.features == null || result.featureCount == 0) {
            Toast.makeText(this, "查询区域结果为空!", Toast.LENGTH_LONG).show();
            return;
        }
		List<List<Point2D>> pointsLists = new ArrayList<List<Point2D>>();
    	Feature[] queryfeatures = result.features;
   
    	touchGeo = queryfeatures[0].geometry;
      	Rectangle2D bounds = DataUtil.getGraphicsBound(result);
      	DataUtil.zoomMap(bounds, mapView, mapController);
      	
    	for(Feature f:queryfeatures)
 	    {
    		String labelName = null;
    		for(int i = 0;i<f.fieldNames.length;i++)
    		{
    			if(f.fieldNames[i].equals("WGMC"))
    			{
    				labelName = f.fieldValues[i];
    				break;
    			}
    		}
    		Geometry geometry = f.geometry;
 	    	List<Point2D> points = DataUtil.getPiontsFromGeometry(geometry);
 	    	if (geometry.parts.length > 1) {
                int num = 0;
                for (int j = 0; j < geometry.parts.length; j++) {
                    int count = geometry.parts[j];
                    List<Point2D> partList = points.subList(num, num + count);
                    pointsLists.add(partList);
                    num = num + count;
                }
            } else {
                pointsLists.add(points);
            }
    		//pointsLists.add(points);
    		
    		/**
    		 * 标注文字
    		 */
    		Point2D center = new Point2D(geometry.getCenter().x,geometry.getCenter().y);
    		//OverlayItem overlayItem = new OverlayItem(center, labelName,labelName);
    		//dOverLay.addItem(overlayItem);
    		TextOverlay textOverlay = new TextOverlay(center, labelName);
    		mapView.getOverlays().add(textOverlay);
    		textOverlays.add(textOverlay);
 	    }
    	
    	// 把所有查询的几何对象都高亮显示
        for (int m = 0; m < pointsLists.size(); m++) {
            List<Point2D> geoPointList = pointsLists.get(m);
            TouchGridOverlays polygonOverlay = new TouchGridOverlays(new DrawUtil().getPolygonPaint(Color.BLUE,180,3));
            mapView.getOverlays().add(polygonOverlay);
            polygonOverlays.add(polygonOverlay);
            polygonOverlay.setData(geoPointList);
            polygonOverlay.setShowPoints(false);
           
        }
    
        this.mapView.invalidate(); //刷新地图
	}
	
	/**
	 * 绘制查询房屋数据
	 * @param houseResult
	 */
	protected void drawHouseOnMap(GetFeaturesResult houseResult)
	{
		if (houseResult == null || houseResult.features == null) {
            Toast.makeText(this, "查询结果为空!", Toast.LENGTH_LONG).show();
            return;
        }
		
		List<List<Point2D>> pointsLists = new ArrayList<List<Point2D>>();
    	Feature[] queryfeatures = houseResult.features;
    	
   	 	for(Feature f:queryfeatures)
	    {
	   		Geometry geometry = f.geometry;
	    	List<Point2D> points = DataUtil.getPiontsFromGeometry(geometry);
	    	if (geometry.parts.length > 1) 
	    	{
               int num = 0;
               for (int j = 0; j < geometry.parts.length; j++)
               {
                   int count = geometry.parts[j];
                   List<Point2D> partList = points.subList(num, num + count);
                   pointsLists.add(partList);
                   num = num + count;
               }
	    	} 
	    	else 
	    	{
               pointsLists.add(points);
	    	}
	    }
   	 	
    	// 把所有查询的几何对象都高亮显示
        for (int m = 0; m < pointsLists.size(); m++) {
            List<Point2D> geoPointList = pointsLists.get(m);
            PolygonOverlay polygonOverlay = new PolygonOverlay(new DrawUtil().getPolygonPaint(0x9696fe,50,1,Paint.Style.FILL));
            //PolygonOverlay polygonOverlay = new TouchPolygonOverlays(getPolygonPaint(0x9696fe,50,1,Paint.Style.FILL));
            mapView.getOverlays().add(polygonOverlay);
            houseOverlays.add(polygonOverlay);
            polygonOverlay.setData(geoPointList);
            polygonOverlay.setShowPoints(false);
           
        }

        
        this.mapView.invalidate(); //刷新地图
	}
	
	/**
	 * 绘制选中房屋
	 * @param houseResult
	 * @return
	 */
	protected HouseModel drawSelectedHouse(GetFeaturesResult houseResult)
	{
		if (houseResult == null || houseResult.features == null || houseResult.featureCount == 0) {
            Toast.makeText(this, "查询结果为空!", Toast.LENGTH_LONG).show();
            return null;
        }
		
		Feature feature = houseResult.features[0];
   		Geometry geometry = feature.geometry;
    	List<Point2D> points = DataUtil.getPiontsFromGeometry(geometry);
    	// 把所有查询的几何对象都高亮显示
    	
    	if(buildOverlay!=null && mapView.getOverlays().contains(buildOverlay))
    	{
    		mapView.getOverlays().remove(buildOverlay);
    		buildOverlay.destroy();
    	}
    	
    	PolygonOverlay overlay = new PolygonOverlay(new DrawUtil().getPolygonPaint(0xff0000,150,1,Paint.Style.FILL));
        mapView.getOverlays().add(overlay);
        overlay.setData(points);
        overlay.setShowPoints(false);
        mapView.invalidate();
        buildOverlay = overlay;
        
        String houseCode = "";
        for(int i = 0;i<feature.fieldNames.length;i++)
		{
			if(feature.fieldNames[i].equals(getString(R.string.houseCode)))
			{
				houseCode = feature.fieldValues[i];
				break;
			}
		}
		
		TipForm.showToast("房屋编码：" + houseCode,getApplicationContext()); 
        
		return null;
	}
	
	/**
	 * 绘制部件信息
	 * @param result
	 */
	protected void drawParts(GetFeaturesResult result)
	{
		if (result == null || result.features == null || result.featureCount == 0) {
            Toast.makeText(this, "查询部件结果为空!", Toast.LENGTH_LONG).show();
            return;
        }
		
        if(mapView.getOverlays().contains(partsOverlay))
        {
        	mapView.getOverlays().remove(partsOverlay);
        	if(partsOverlay.size() > 0)
        	{
        		partsOverlay.clear();
        	}
        }
		
		Feature[] features = result.features;
        for (int i = 0; i < 10; i++) {
            Feature feature = result.features[i];
            Geometry geometry = feature.geometry;
            List<Point2D> geoPoints = DataUtil.getPiontsFromGeometry(geometry);
            if (geoPoints != null && geoPoints.size() > 0) {
                OverlayItem overlayItem = new OverlayItem(geoPoints.get(0), null, null);
                partsOverlay.addItem(overlayItem);
            }
        }
        mapView.getOverlays().add(partsOverlay);
        mapView.invalidate();
	}
	
	/**
	 * 行政区域overlays
	 * @author Administrator
	 *
	 */
	class TouchGridOverlays extends PolygonOverlay
	{
		public TouchGridOverlays(Paint polygonPaint) {
			super(polygonPaint);
		}

		@Override
		public boolean onTouchEvent(MotionEvent event, MapView map) {
//			if (event.getAction() == MotionEvent.ACTION_UP) {
//                int touchX = Math.round(event.getX());
//                int touchY = Math.round(event.getY());
//                		
//                // 记录点击位置
//                Point2D touchPoint = mapView.getProjection().fromPixels(touchX, touchY);
//
//                Boolean isIn = Geometry.isPointInPolygon(new com.supermap.services.components.
//                		commontypes.Point2D(touchPoint.x, touchPoint.y), touchGeo);
//                if(isIn)
//                {
//                	//showProgressDialog();
//                	
//                	if(uType.equals("0"))
//                	{
//                		
//                	}else if(uType.equals("1"))
//                	{
//                		TipForm.showProgressDialog(LiloInfoUpdateActivity.this);
//                		new RunQueryByPoint(dataUrl, getString(R.string.sm_house),
//                				touchPoint, touchHouseHandler).execute("*");
//                	}
//                	
//                }else
//                {
//                	TipForm.showToast("请在划定的区域内点击",getApplicationContext());
//                }
//                
//            }
            switch (event.getAction()) {
	            case MotionEvent.ACTION_DOWN: // 捕获手指触摸按下动作
	                isAddPoint = true;
	                touchDownX = Math.round(event.getX());
	                touchDownY = Math.round(event.getY());
	                break;
	            case MotionEvent.ACTION_MOVE: // 捕获手指触摸移动动作
	                int x = Math.round(event.getX());
	                int y = Math.round(event.getY());
	                if (Math.abs(x - touchDownX) > 4 || Math.abs(y - touchDownY) > 4) {
	                    isAddPoint = false;// 平移不加入该点
	                }
	                break;
	            case MotionEvent.ACTION_UP: // 捕获手指触摸离开动作
	                if (isAddPoint) {
	                    touchX = Math.round(event.getX());
	                    touchY = Math.round(event.getY());
	                    // 记录点击位置
		                  Point2D touchPoint = mapView.getProjection().fromPixels(touchX, touchY);
		  
		                  Boolean isIn = Geometry.isPointInPolygon(new com.supermap.services.components.
		                  		commontypes.Point2D(touchPoint.x, touchPoint.y), touchGeo);
		                  if(isIn)
		                  {
		                  	//showProgressDialog();
		                  	
		                  	if(uType.equals("0"))
		                  	{
		                  		
		                  	}else if(uType.equals("1"))
		                  	{
		                  		TipForm.showProgressDialog(LiloInfoUpdateActivity.this);
		                  		new RunQueryByPoint(dataUrl, getString(R.string.sm_house),
		                  				touchPoint, touchHouseHandler).execute("*");
		                  	}
		                  	
		                  }else
		                  {
		                  	TipForm.showToast("请在划定的区域内点击",getApplicationContext());
		                  }
	                    
	                }
	                isAddPoint = true;
	                break;
            }
            return false;
		}
	}
	

    
    /**
     * 清空绘制区域
     */
    protected void clearRegionLay()
    {
    	 //lineOverlay.setData(new ArrayList<Point2D>());
         //polygonOverlay.setData(new ArrayList<Point2D>());
        // geoPoints.clear();
         if (polygonOverlays.size() != 0) {
             mapView.getOverlays().remove(polygonOverlays);
             polygonOverlays.clear();
         }
         if(textOverlays.size()!=0)
         {
        	 mapView.getOverlays().remove(textOverlays);
        	 textOverlays.clear();
         }
         if(houseOverlays.size()!=0)
         {
        	 mapView.getOverlays().remove(houseOverlays);
        	 houseOverlays.clear();
         }
         mapView.invalidate();
    }
    


	

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		//getMenuInflater().inflate(R.menu.lilo_parts, menu);
		return true;
	}
	
	@Override
	protected void onDestroy() {
		super.onDestroy();
		mapView.destroy();
	}

	
}
